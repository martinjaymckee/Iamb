/*
 * fixed_point_arithmetic.h
 *
 *  Created on: Nov 28, 2016
 *      Author: martin
 */

#ifndef FIXED_POINT_ARITHMETIC_H_
#define FIXED_POINT_ARITHMETIC_H_

#include "fixed_point.h"

namespace fixedpoint
{

//
// Basic Arithmetical Operations
//
template<class _storage_type, uint8_t _frac_bits, class _calc_type>
FixedPoint<_storage_type, _frac_bits, _calc_type> operator - (const FixedPoint<_storage_type, _frac_bits, _calc_type>& _a) {
    static const FixedPoint<_storage_type, _frac_bits, _calc_type> neg_one(-1);
    return neg_one * _a;
}

template<class _storage_type, uint8_t _frac_bits, class _calc_type, class S, uint8_t F, class C>
FixedPoint<_storage_type, _frac_bits, _calc_type> operator + (const FixedPoint<_storage_type, _frac_bits, _calc_type>& _a, const FixedPoint<S, F, C>& _b) {
    FixedPoint<_storage_type> temp = _a;
    temp += _b;
    return temp;
}

template<class _storage_type, uint8_t _frac_bits, class _calc_type, class S, uint8_t F, class C>
FixedPoint<_storage_type, _frac_bits, _calc_type> operator - (const FixedPoint<_storage_type, _frac_bits, _calc_type>& _a, const FixedPoint<S, F, C>& _b) {
    FixedPoint<_storage_type, _frac_bits, _calc_type> temp = _a;
    temp -= _b;
    return temp;
}

template<class _storage_type, uint8_t _frac_bits, class _calc_type, class S, uint8_t F, class C>
FixedPoint<_storage_type, _frac_bits, _calc_type> operator * (const FixedPoint<_storage_type, _frac_bits, _calc_type>& _a, const FixedPoint<S, F, C>& _b) {
    FixedPoint<_storage_type, _frac_bits, _calc_type> temp = _a;
    temp *= _b;
    return temp;
}

template<class _storage_type, uint8_t _frac_bits, class _calc_type, class S, uint8_t F, class C>
FixedPoint<_storage_type, _frac_bits, _calc_type> operator / (const FixedPoint<_storage_type, _frac_bits, _calc_type>& _a, const FixedPoint<S, F, C>& _b) {
    FixedPoint<_storage_type, _frac_bits, _calc_type> temp = _a;
    temp /= _b;
    return temp;
}


template<uint8_t N>
struct Compare
{
    template<class S, uint8_t F, class C>
    static bool equalTo(const FixedPoint<S, F, C>& _a, const FixedPoint<S, F, C>& _b) {
        typedef FixedPoint<S, F, C> value_t;
        typedef typename value_t::storage_t storage_t;
        typedef typename value_t::calc_t calc_t;

        static const storage_t mask = ((calc_t(1UL)<<N)-1UL)<<(value_t::TOTAL_BITS-N);
        return (_a.storage() & mask) == (_b.storage() & mask);
    }

};

//  Reciprocal
template<class _storage_type, uint8_t _frac_bits, class _calc_type>
FixedPoint<_storage_type, _frac_bits, _calc_type> reciprocal(const FixedPoint<_storage_type, _frac_bits, _calc_type>& _a) {
    static const FixedPoint<_storage_type, _frac_bits, _calc_type> one(1);
    return one/_a;
}

} // namespace fixedpoint

#endif /* FIXED_POINT_ARITHMETIC_H_ */
